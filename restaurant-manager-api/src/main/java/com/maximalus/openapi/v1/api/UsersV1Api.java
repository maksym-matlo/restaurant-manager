/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.maximalus.openapi.v1.api;

import com.maximalus.openapi.v1.model.Error;
import com.maximalus.openapi.v1.model.PageView;
import com.maximalus.openapi.v1.model.RequestFilter;
import com.maximalus.openapi.v1.model.CommonResponseDto;
import com.maximalus.openapi.v1.model.UserDto;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import springfox.documentation.annotations.ApiIgnore;

import javax.annotation.Generated;
import javax.validation.Valid;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-05-03T11:47:28.437270400+03:00[Europe/Helsinki]")
@Validated
@Api(value = "UsersV1", description = "the UsersV1 API")
public interface UsersV1Api {

    /**
     * GET /ui/users/{userId} : Information about concrete user
     *
     * @param userId User identifier (required)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "Information about concrete user", nickname = "getUserById", notes = "", response = UserDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = UserDto.class),
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = Error.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = Error.class),
        @ApiResponse(code = 404, message = "Resource was not found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal server error", response = Error.class) })
    @RequestMapping(value = "/ui/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserDto> getUserById(@ApiParam(value = "User identifier",required=true) @PathVariable("userId") Long userId);


    /**
     * GET /ui/users : List of users
     *
     * @param page Page number (optional)
     * @param size User count on page (optional)
     * @param sort Sort criteria (can have multiple declarations)(id, firstName, lastName, outlet) (optional)
     * @param id Filter criteria (can have multiple declarations) (optional)
     * @param surname Filter criteria (can have multiple declarations) (optional)
     * @param firstName Filter criteria (can have multiple declarations) (optional)
     * @return Successful response (status code 200)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "List of users", nickname = "getUserList", notes = "", response = PageView.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = PageView.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = Error.class),
        @ApiResponse(code = 404, message = "Resource was not found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal server error", response = Error.class) })
    @RequestMapping(value = "/ui/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PageView<UserDto>> getUserList(
            Pageable pageable,
            @ApiIgnore @Valid RequestFilter filter);


    /**
     * POST /ui/users : Creating new users
     *
     * @param userDto Callback payload (optional)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "Creating new users", nickname = "postUser", notes = "", response = CommonResponseDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class),
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = Error.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = Error.class),
        @ApiResponse(code = 404, message = "Resource was not found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal server error", response = Error.class) })
    @RequestMapping(value = "/ui/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CommonResponseDto> postUser(@ApiParam(value = "Callback payload"  ) @Valid @RequestBody(required = false) UserDto userDto);


    /**
     * PUT /ui/users/{userId} : User updating
     *
     * @param userId Id for user updating (required)
     * @param userDto Callback payload (optional)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "User updating", nickname = "updateUser", notes = "", response = CommonResponseDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class),
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = Error.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = Error.class),
        @ApiResponse(code = 404, message = "Resource was not found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal server error", response = Error.class) })
    @RequestMapping(value = "/ui/users/{userId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<CommonResponseDto> updateUser(
            @ApiParam(value = "Id for user updating",required=true)
            @PathVariable("userId") Long userId,
            @ApiParam(value = "Callback payload" )
            @Valid @RequestBody(required = false) UserDto userDto);

    /**
     * DELETE /ui/users/{userId} : User deletion
     *
     * @param userId Id for user updating (required)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Internal server error (status code 500)
     */
    @ApiOperation(value = "User deletion", nickname = "deleteUser", notes = "", response = CommonResponseDto.class,
            authorizations = {
                    @Authorization(value = "bearerAuth")
            }, tags={ "users-v1", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class),
            @ApiResponse(code = 400, message = "Supplied request data are invalid", response = Error.class),
            @ApiResponse(code = 401, message = "Access token is missing or invalid"),
            @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = Error.class),
            @ApiResponse(code = 500, message = "Internal server error", response = Error.class) })
    @RequestMapping(value = "/ui/users/{userId}",
            produces = { "application/json" },
            method = RequestMethod.DELETE)
    ResponseEntity<UserDto> deleteUser(@ApiParam(value = "Id for user updating",required=true) @PathVariable("userId") Long userId);
}
